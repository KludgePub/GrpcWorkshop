/*
v1/logistics.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Apiv1Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Apiv1Location{}

// Apiv1Location struct for Apiv1Location
type Apiv1Location struct {
	Latitude *int64 `json:"Latitude,omitempty"`
	Longitude *int64 `json:"Longitude,omitempty"`
}

// NewApiv1Location instantiates a new Apiv1Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiv1Location() *Apiv1Location {
	this := Apiv1Location{}
	return &this
}

// NewApiv1LocationWithDefaults instantiates a new Apiv1Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiv1LocationWithDefaults() *Apiv1Location {
	this := Apiv1Location{}
	return &this
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *Apiv1Location) GetLatitude() int64 {
	if o == nil || IsNil(o.Latitude) {
		var ret int64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apiv1Location) GetLatitudeOk() (*int64, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *Apiv1Location) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given int64 and assigns it to the Latitude field.
func (o *Apiv1Location) SetLatitude(v int64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *Apiv1Location) GetLongitude() int64 {
	if o == nil || IsNil(o.Longitude) {
		var ret int64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apiv1Location) GetLongitudeOk() (*int64, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *Apiv1Location) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given int64 and assigns it to the Longitude field.
func (o *Apiv1Location) SetLongitude(v int64) {
	o.Longitude = &v
}

func (o Apiv1Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Apiv1Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Latitude) {
		toSerialize["Latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["Longitude"] = o.Longitude
	}
	return toSerialize, nil
}

type NullableApiv1Location struct {
	value *Apiv1Location
	isSet bool
}

func (v NullableApiv1Location) Get() *Apiv1Location {
	return v.value
}

func (v *NullableApiv1Location) Set(val *Apiv1Location) {
	v.value = val
	v.isSet = true
}

func (v NullableApiv1Location) IsSet() bool {
	return v.isSet
}

func (v *NullableApiv1Location) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiv1Location(val *Apiv1Location) *NullableApiv1Location {
	return &NullableApiv1Location{value: val, isSet: true}
}

func (v NullableApiv1Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiv1Location) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


