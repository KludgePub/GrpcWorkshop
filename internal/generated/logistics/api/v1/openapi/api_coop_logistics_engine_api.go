/*
v1/logistics.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CoopLogisticsEngineAPIAPIService CoopLogisticsEngineAPIAPI service
type CoopLogisticsEngineAPIAPIService service

type ApiCoopLogisticsEngineAPIMoveUnitRequest struct {
	ctx context.Context
	ApiService *CoopLogisticsEngineAPIAPIService
	cargoUnitId *string
	locationLatitude *int64
	locationLongitude *int64
}

func (r ApiCoopLogisticsEngineAPIMoveUnitRequest) CargoUnitId(cargoUnitId string) ApiCoopLogisticsEngineAPIMoveUnitRequest {
	r.cargoUnitId = &cargoUnitId
	return r
}

func (r ApiCoopLogisticsEngineAPIMoveUnitRequest) LocationLatitude(locationLatitude int64) ApiCoopLogisticsEngineAPIMoveUnitRequest {
	r.locationLatitude = &locationLatitude
	return r
}

func (r ApiCoopLogisticsEngineAPIMoveUnitRequest) LocationLongitude(locationLongitude int64) ApiCoopLogisticsEngineAPIMoveUnitRequest {
	r.locationLongitude = &locationLongitude
	return r
}

func (r ApiCoopLogisticsEngineAPIMoveUnitRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CoopLogisticsEngineAPIMoveUnitExecute(r)
}

/*
CoopLogisticsEngineAPIMoveUnit MoveUnit request will be send when unit moves in dimensions to new location.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCoopLogisticsEngineAPIMoveUnitRequest
*/
func (a *CoopLogisticsEngineAPIAPIService) CoopLogisticsEngineAPIMoveUnit(ctx context.Context) ApiCoopLogisticsEngineAPIMoveUnitRequest {
	return ApiCoopLogisticsEngineAPIMoveUnitRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CoopLogisticsEngineAPIAPIService) CoopLogisticsEngineAPIMoveUnitExecute(r ApiCoopLogisticsEngineAPIMoveUnitRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoopLogisticsEngineAPIAPIService.CoopLogisticsEngineAPIMoveUnit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/cargo_unit/move"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cargoUnitId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cargoUnitId", r.cargoUnitId, "")
	}
	if r.locationLatitude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location.Latitude", r.locationLatitude, "")
	}
	if r.locationLongitude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location.Longitude", r.locationLongitude, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest struct {
	ctx context.Context
	ApiService *CoopLogisticsEngineAPIAPIService
	locationLatitude *int64
	locationLongitude *int64
	announcementCargoUnitId *string
	announcementWarehouseId *string
	announcementMessage *string
}

func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) LocationLatitude(locationLatitude int64) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	r.locationLatitude = &locationLatitude
	return r
}

func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) LocationLongitude(locationLongitude int64) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	r.locationLongitude = &locationLongitude
	return r
}

// cargo_unit_id is unique id
func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) AnnouncementCargoUnitId(announcementCargoUnitId string) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	r.announcementCargoUnitId = &announcementCargoUnitId
	return r
}

// warehouse_id is unique id
func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) AnnouncementWarehouseId(announcementWarehouseId string) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	r.announcementWarehouseId = &announcementWarehouseId
	return r
}

// the message contains information about the announcement
func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) AnnouncementMessage(announcementMessage string) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	r.announcementMessage = &announcementMessage
	return r
}

func (r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CoopLogisticsEngineAPIUnitReachedWarehouseExecute(r)
}

/*
CoopLogisticsEngineAPIUnitReachedWarehouse UnitReachedWarehouse reports when unit reached warehouse to do something there.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest
*/
func (a *CoopLogisticsEngineAPIAPIService) CoopLogisticsEngineAPIUnitReachedWarehouse(ctx context.Context) ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest {
	return ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *CoopLogisticsEngineAPIAPIService) CoopLogisticsEngineAPIUnitReachedWarehouseExecute(r ApiCoopLogisticsEngineAPIUnitReachedWarehouseRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CoopLogisticsEngineAPIAPIService.CoopLogisticsEngineAPIUnitReachedWarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/warehouse/cargo_unit/reached"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.locationLatitude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location.Latitude", r.locationLatitude, "")
	}
	if r.locationLongitude != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location.Longitude", r.locationLongitude, "")
	}
	if r.announcementCargoUnitId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "announcement.cargoUnitId", r.announcementCargoUnitId, "")
	}
	if r.announcementWarehouseId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "announcement.warehouseId", r.announcementWarehouseId, "")
	}
	if r.announcementMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "announcement.message", r.announcementMessage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
